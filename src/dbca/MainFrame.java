/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dbca;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
/**
 *
 * @author seabirds
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    ArrayList itemSet[]=new ArrayList[20];
    ArrayList itemSetCount[]=new ArrayList[20];
    int icnt=0;
    int icnt1=0;
    Vector<String> candidates=new Vector<>();
    int minSup=2;
    Connection con;
    Statement st,st1,st2;
    
    String data[][];
    ArrayList item1=new ArrayList();  
    ArrayList item2=new ArrayList();                    
    ArrayList item3=new ArrayList();
    ArrayList item4=new ArrayList();

    ArrayList ic1=new ArrayList();  
    ArrayList ic2=new ArrayList();                    
    ArrayList ic3=new ArrayList();
    ArrayList ic4=new ArrayList();

    public MainFrame() {
        initComponents();
        try
        {
         Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbca", "root", "");
            st = con.createStatement();
            st1 = con.createStatement();
            st2 = con.createStatement();
//            jButton1.setVisible(false);
        }
        catch(ClassNotFoundException | SQLException e)
        {
            System.out.println(e.getMessage());
        }
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Cambria Math", 0, 24)); // NOI18N
        jLabel1.setText("Frequent Pattern Mining");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Frequent");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Cambria Math", 0, 17)); // NOI18N
        jButton2.setText("Subsets");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 3, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
//        try
//        {
//            int k1=0;
//            ResultSet rs=st.executeQuery("select * from batchfinal");
//                 int k2=0;
//            while(rs.next())
//            {
//           data[k1][k2++]=rs.getString(1);
//           
//            
//                
//            }
//            k1++;
//        }
//        catch(Exception e)
//        {
//            System.out.println(e.getMessage());
//        }
        try
        {
//            ResultSet rs=st.executeQuery("select * from batchfinal");
            for(int i=1;i<data.length;i++)
           
//            while(rs.next())
            {
                
                //System.out.println(data[i][0]+" : "+data[i][1]);
                String g1=data[i][1];
                //char ch[]=g1.toCharArray();
//              data[][]=rs.getString(1);
//                String g1=rs.getString(1);
                String ch[]=g1.split("#");

                for(int j=0;j<ch.length;j++)
                {
                    if(!(item1.contains(String.valueOf(ch[j]))))
                    item1.add(String.valueOf(ch[j]));
                }

                for(int j1=0;j1<ch.length;j1++)
                {
                    for(int j2=j1+1;j2<ch.length;j2++)
                    {
                     String g2=String.valueOf(ch[j1])+"#"+String.valueOf(ch[j2]);
                        if(!(item2.contains(g2)))
                            item2.add(g2);
                    }
                }

                for(int j1=0;j1<ch.length;j1++)
                {
                    for(int j2=j1+1;j2<ch.length;j2++)
                    {
                        for(int j3=j2+1;j3<ch.length;j3++)
                        {
                            
                            String g2=String.valueOf(ch[j1])+"#"+String.valueOf(ch[j2])+"#"+String.valueOf(ch[j3]);
                            if(!(item3.contains(g2)))
                            item3.add(g2);
                        }
                    }
                }

			for(int j1=0;j1<ch.length;j1++)
                {
                    for(int j2=j1+1;j2<ch.length;j2++)
                    {
			    for(int j3=j2+1;j3<ch.length;j3++)
                    {
                        for(int j4=j3+1;j4<ch.length;j4++)
                        {
                            
                       String g2=String.valueOf(ch[j1])+"#"+String.valueOf(ch[j2])+"#"+String.valueOf(ch[j3])+"#"+String.valueOf(ch[j4]);
                            if(!(item4.contains(g2)))
                            item4.add(g2);
                        }
                    }
                }
		}


            }
            System.out.println(item1);
            System.out.println(item2);
            System.out.println(item3);
		 System.out.println(item4);

            String txt="1-subset\n\n";
            for(int i=0;i<item1.size();i++)
            {
                String g1=item1.get(i).toString();
                int k=0;
                for(int j=1;j<data.length;j++)
                {
                    String g2=data[j][1];
                    if(g2.contains(g1))
                    k++;
                }
                ic1.add(k);
                System.out.println(g1+" : "+k);
                txt=txt+g1+" : "+k+"\n";
            }

            txt=txt+"\n2-subset\n\n";
            for(int i=0;i<item2.size();i++)
            {
                String s1=item2.get(i).toString();
                //char g1[]=s1.toCharArray();
                String g1[]=s1.split("#");
                int k=0;
                for(int j=1;j<data.length;j++)
                {
                    String g2=data[j][1];
                    if(g2.contains(String.valueOf(g1[0])) && g2.contains(String.valueOf(g1[1])))
                        k++;
                }
                ic2.add(k);
                System.out.println(s1+" : "+k);
                txt=txt+s1+" : "+k+"\n";
            }
           // txt=txt+"\n3-itemset\n\n";

            for(int i=0;i<item3.size();i++)
            {
                String s1=item3.get(i).toString();
                //char g1[]=s1.toCharArray();
                String g1[]=s1.split("#");
                int k=0;
                for(int j=1;j<data.length;j++)
                {
                    String g2=data[j][1];
                    if(g2.contains(String.valueOf(g1[0])) && g2.contains(String.valueOf(g1[1])) && g2.contains(String.valueOf(g1[2])))
                    k++;
                }
                ic3.add(k);
                System.out.println(s1+" : "+k);
                //txt=txt+s1+" : "+k+"\n";
            }

            
 // txt=txt+"\n4-itemset\n\n";

            for(int i=0;i<item4.size();i++)
            {
                String s1=item4.get(i).toString();
                //char g1[]=s1.toCharArray();
                String g1[]=s1.split("#");
                int k=0;
                for(int j=1;j<data.length;j++)
                {
                    String g2=data[j][1];
                    if(g2.contains(String.valueOf(g1[0])) && g2.contains(String.valueOf(g1[1])) && g2.contains(String.valueOf(g1[2]))&& g2.contains(String.valueOf(g1[3])) )
                    k++;
                }
                ic4.add(k);
                System.out.println(s1+" : "+k);
                //txt=txt+s1+" : "+k+"\n";
            }

           
            
            
            int itemsetNumber=0;
            do
            {
                itemsetNumber++;
           
                generateCandidates(itemsetNumber);
                if(candidates.size()!=0)
                {
                    System.out.println("Frequent " + itemsetNumber + "-itemsets");
                    System.out.println(candidates);
                    ArrayList at1=new ArrayList();
                    for(int i=0;i<candidates.size();i++)
                    {
                        System.out.println("--- "+candidates.get(i));
                        String g1=candidates.get(i).trim();
                        if(g1.contains(" "))
                            g1=g1.replace(" ", "#");
                        
                        at1.add(g1);
                    }
                    System.out.println("---- Item Set "+itemsetNumber+" : "+at1);
                    itemSet[icnt]=at1;
                    icnt++;
                }
            }while(candidates.size()>1);
            
            
            System.out.println(candidates.size()+" : "+itemSet.length+" : "+icnt);
            
           
            for(int i=0;i<icnt;i++)
            {
                
                ArrayList v1=itemSet[i];
                System.out.println(v1);
                ArrayList list1=new ArrayList();
                for(int j=0;j<v1.size();j++)
                {
                    String g1=v1.get(j).toString();
                    if(g1.contains("#"))
                    {
                        int k=0;
                        String sg1[]=g1.split("#");
                        for(int j1=1;j1<data.length;j1++)
                        {
                            String g2=data[j1][1];
                            int f1=0;
                            for(int t1=0;t1<sg1.length;t1++)
                            {
                                if(g2.contains(sg1[t1]))
                                    f1++;
                            }
                            if(f1==sg1.length)
                                k++;
                        }
                        System.out.println(g1+ " : "+k);
                        
                
                        
                        list1.add(g1+"#"+k);
                    }
                    else
                    {
                        int k=0;
                        for(int j1=1;j1<data.length;j1++)
                        {
                            String g2=data[j1][1];
                            if(g2.contains(g1))
                                k++;
                        }
                        System.out.println(g1+ " : "+k);
                        
                        
                        list1.add(g1+"#"+k);
                    }
                }
                 
               
                
                itemSetCount[icnt1]=list1;
                icnt1++;
            }
            
            
            
            
            SubsetFrame bf=new SubsetFrame(this);
            bf.setTitle("Item SubSet ");
            bf.setVisible(true);
            bf.setResizable(false);
            bf.jTextArea1.setText(txt);
            
            
            
        }
        catch(Exception e )
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        InputStream input = null;
        try {
            input = new BufferedInputStream(new FileInputStream("./batchfinal1.xls"));
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Iterator rows = sheet.rowIterator();
            Iterator rows1 = sheet.rowIterator();
            int kk=0;
            while( rows.hasNext() )
            {
                HSSFRow row = (HSSFRow) rows.next();
                kk++;
            }
            System.out.println("kk "+kk);
            data=new String[kk][2];
            int k1=0;
            while(rows1.hasNext())
            {
                HSSFRow row = (HSSFRow) rows1.next();
                System.out.println("\n");
                Iterator cells = row.cellIterator();
                int k2=0;
                while( cells.hasNext() )
                {
                    HSSFCell cell = (HSSFCell) cells.next();
                    System.out.print("  "+cell.toString());
                    data[k1][k2++]=cell.toString().trim();
                }
                k1++;
            }
            Vector v1=new Vector();
            v1.add(data[0][0]);
            v1.add(data[0][1]);
//            DefaultTableModel dm=(DefaultTableModel)jTable1.getModel();
//            dm.setColumnIdentifiers(v1);
            for(int i=1;i<data.length;i++)
            {
                Vector v2=new Vector();
                v2.add(data[i][0]);
                v2.add(data[i][1]);
//                dm.addRow(v2);
                //System.out.println(data[i][0]+" : "+data[i][1]);
            }
            JOptionPane.showMessageDialog(null,"frequent values calculated");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                input.close();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                

           
    }//GEN-LAST:event_jButton1ActionPerformed

    void generateCandidates(int n)
    {
		
	int numItems=item1.size();
        Vector<String> temp = new Vector<String>(); 
        String str1, str2; 
        StringTokenizer st1, st2;

        
        if(n==1)
        {
            for(int i=0; i<numItems; i++)
            {
               
		temp.add(item1.get(i).toString());
            }
        }
        else if(n==2) 
        {
            
            for(int i=0; i<candidates.size(); i++)
            {
                st1 = new StringTokenizer(candidates.get(i));
                str1 = st1.nextToken();
                for(int j=i+1; j<candidates.size(); j++)
                {
                    st2 = new StringTokenizer(candidates.elementAt(j));
                    str2 = st2.nextToken();
                    temp.add(str1 + " " + str2);
                }
            }
        }
        else
        {
            
            for(int i=0; i<candidates.size(); i++)
            {
            
                for(int j=i+1; j<candidates.size(); j++)
                {
                    
                    str1 = new String();
                    str2 = new String();
                    
                    st1 = new StringTokenizer(candidates.get(i));
                    st2 = new StringTokenizer(candidates.get(j));

                    
                    for(int s=0; s<n-2; s++)
                    {
                        str1 = str1 + " " + st1.nextToken();
                        str2 = str2 + " " + st2.nextToken();
                    }

                    
                    if(str2.compareToIgnoreCase(str1)==0)
                        temp.add((str1 + " " + st1.nextToken() + " " + st2.nextToken()).trim());
                }
            }
        }
        
        candidates.clear();
        
        candidates = new Vector<String>(temp);
        temp.clear();
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
